var _wende$elmchemy_core$Elmchemy_XList$sort_ = A2(_wende$elmchemy_core$Elmchemy$ffi, 'Enum', 'sort');
var _wende$elmchemy_core$Elmchemy_XList$sortWith = F2(
	function (f, list) {
		var exf = F2(
			function (a, b) {
				return function (a) {
					var _p0 = a;
					switch (_p0.ctor) {
						case 'GT':
							return false;
						case 'EQ':
							return false;
						default:
							return true;
					}
				}(
					A2(f, a, b));
			});
		return A2(_wende$elmchemy_core$Elmchemy_XList$sort_, list, exf);
	});
var _wende$elmchemy_core$Elmchemy_XList$sortBy = F2(
	function (f, list) {
		return A2(
			_wende$elmchemy_core$Elmchemy_XList$sortWith,
			F2(
				function (a, b) {
					return A2(
						_elm_lang$core$Basics$compare,
						f(a),
						f(b));
				}),
			list);
	});
var _wende$elmchemy_core$Elmchemy_XList$sort = function (xs) {
	return A2(_wende$elmchemy_core$Elmchemy_XList$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _wende$elmchemy_core$Elmchemy_XList$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _wende$elmchemy_core$Elmchemy_XList$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p1 = list;
				if (_p1.ctor === '[]') {
					return list;
				} else {
					var _v2 = n - 1,
						_v3 = _p1._1;
					n = _v2;
					list = _v3;
					continue drop;
				}
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$zip_ = A2(_wende$elmchemy_core$Elmchemy$ffi, 'Enum', 'zip');
var _wende$elmchemy_core$Elmchemy_XList$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p2 = list;
			if (_p2.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p2._0)) {
					return true;
				} else {
					var _v5 = isOkay,
						_v6 = _p2._1;
					isOkay = _v5;
					list = _v6;
					continue any;
				}
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$all = F2(
	function (isOkay, list) {
		return !A2(
			_wende$elmchemy_core$Elmchemy_XList$any,
			function (_p3) {
				return !isOkay(_p3);
			},
			list);
	});
var _wende$elmchemy_core$Elmchemy_XList$foldr_ = A2(_wende$elmchemy_core$Elmchemy$ffi, 'List', 'foldr');
var _wende$elmchemy_core$Elmchemy_XList$foldr = F3(
	function (f, start, list) {
		return A3(_wende$elmchemy_core$Elmchemy_XList$foldr_, list, start, f);
	});
var _wende$elmchemy_core$Elmchemy_XList$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p4 = list;
			if (_p4.ctor === '[]') {
				return acc;
			} else {
				var _v8 = func,
					_v9 = A2(func, _p4._0, acc),
					_v10 = _p4._1;
				func = _v8;
				acc = _v9;
				list = _v10;
				continue foldl;
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$length = function (xs) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldl,
		F2(
			function (_p5, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _wende$elmchemy_core$Elmchemy_XList$sum = function (numbers) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _wende$elmchemy_core$Elmchemy_XList$product = function (numbers) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _wende$elmchemy_core$Elmchemy_XList$maximum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_wende$elmchemy_core$Elmchemy_XList$foldl, _elm_lang$core$Basics$max, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _wende$elmchemy_core$Elmchemy_XList$minimum = function (list) {
	var _p7 = list;
	if (_p7.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_wende$elmchemy_core$Elmchemy_XList$foldl, _elm_lang$core$Basics$min, _p7._0, _p7._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _wende$elmchemy_core$Elmchemy_XList$member = F2(
	function (x, xs) {
		return A2(
			_wende$elmchemy_core$Elmchemy_XList$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _wende$elmchemy_core$Elmchemy_XList$isEmpty = function (xs) {
	var _p8 = xs;
	if (_p8.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _wende$elmchemy_core$Elmchemy_XList$tail = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _wende$elmchemy_core$Elmchemy_XList$head = function (list) {
	var _p10 = list;
	if (_p10.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p10._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _wende$elmchemy_core$Elmchemy_XList_ops = _wende$elmchemy_core$Elmchemy_XList_ops || {};
_wende$elmchemy_core$Elmchemy_XList_ops['::'] = F2(
	function (a, list) {
		return A2(_wende$elmchemy_core$Elmchemy_XList$cons, a, list);
	});
var _wende$elmchemy_core$Elmchemy_XList$cons = F2(
	function (a, list) {
		return A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], a, list);
	});
var _wende$elmchemy_core$Elmchemy_XList$map = F2(
	function (f, xs) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$foldr,
			F2(
				function (x, acc) {
					return A2(
						_wende$elmchemy_core$Elmchemy_XList_ops['::'],
						f(x),
						acc);
				}),
			{ctor: '[]'},
			xs);
	});
var _wende$elmchemy_core$Elmchemy_XList$map2 = F3(
	function (f, a, b) {
		return A2(
			_wende$elmchemy_core$Elmchemy_XList$map,
			_elm_lang$core$Basics$uncurry(f),
			A2(_wende$elmchemy_core$Elmchemy_XList$zip_, a, b));
	});
var _wende$elmchemy_core$Elmchemy_XList$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], front, back) : back;
			});
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _wende$elmchemy_core$Elmchemy_XList$maybeCons = F3(
	function (f, mx, xs) {
		var _p11 = f(mx);
		if (_p11.ctor === 'Just') {
			return A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], _p11._0, xs);
		} else {
			return xs;
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$filterMap = F2(
	function (f, xs) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$foldr,
			_wende$elmchemy_core$Elmchemy_XList$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _wende$elmchemy_core$Elmchemy_XList$reverse = function (list) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldl,
		F2(
			function (x, y) {
				return A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], x, y);
			}),
		{ctor: '[]'},
		list);
};
var _wende$elmchemy_core$Elmchemy_XList$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p12 = accAcc;
				if (_p12.ctor === '::') {
					return A2(
						_wende$elmchemy_core$Elmchemy_XList_ops['::'],
						A2(f, x, _p12._0),
						accAcc);
				} else {
					return {ctor: '[]'};
				}
			});
		return _wende$elmchemy_core$Elmchemy_XList$reverse(
			A3(
				_wende$elmchemy_core$Elmchemy_XList$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _wende$elmchemy_core$Elmchemy_XList$append = F2(
	function (xs, ys) {
		var _p13 = ys;
		if (_p13.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_wende$elmchemy_core$Elmchemy_XList$foldr,
				F2(
					function (x, y) {
						return A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], x, y);
					}),
				ys,
				xs);
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$concat = function (lists) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldr,
		_wende$elmchemy_core$Elmchemy_XList$append,
		{ctor: '[]'},
		lists);
};
var _wende$elmchemy_core$Elmchemy_XList$concatMap = F2(
	function (f, list) {
		return _wende$elmchemy_core$Elmchemy_XList$concat(
			A2(_wende$elmchemy_core$Elmchemy_XList$map, f, list));
	});
var _wende$elmchemy_core$Elmchemy_XList$partitionStep = F3(
	function (pred, x, _p14) {
		var _p15 = _p14;
		var _p17 = _p15._0;
		var _p16 = _p15._1;
		return pred(x) ? {
			ctor: '_Tuple2',
			_0: A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], x, _p17),
			_1: _p16
		} : {
			ctor: '_Tuple2',
			_0: _p17,
			_1: A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], x, _p16)
		};
	});
var _wende$elmchemy_core$Elmchemy_XList$partition = F2(
	function (pred, list) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$foldr,
			_wende$elmchemy_core$Elmchemy_XList$partitionStep(pred),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _wende$elmchemy_core$Elmchemy_XList$unzipStep = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return {
			ctor: '_Tuple2',
			_0: A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], _p20._0, _p21._0),
			_1: A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], _p20._1, _p21._1)
		};
	});
var _wende$elmchemy_core$Elmchemy_XList$unzip = function (pairs) {
	return A3(
		_wende$elmchemy_core$Elmchemy_XList$foldr,
		_wende$elmchemy_core$Elmchemy_XList$unzipStep,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _wende$elmchemy_core$Elmchemy_XList$intersperse = F2(
	function (sep, xs) {
		var _p22 = xs;
		if (_p22.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return A2(
						_wende$elmchemy_core$Elmchemy_XList_ops['::'],
						sep,
						A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], x, rest));
				});
			var spersed = A3(
				_wende$elmchemy_core$Elmchemy_XList$foldr,
				step,
				{ctor: '[]'},
				_p22._1);
			return A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], _p22._0, spersed);
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p23 = list;
				if (_p23.ctor === '[]') {
					return taken;
				} else {
					var _v24 = n - 1,
						_v25 = _p23._1,
						_v26 = A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], _p23._0, taken);
					n = _v24;
					list = _v25;
					taken = _v26;
					continue takeReverse;
				}
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$takeTailRec = F2(
	function (n, list) {
		return _wende$elmchemy_core$Elmchemy_XList$reverse(
			A3(
				_wende$elmchemy_core$Elmchemy_XList$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _wende$elmchemy_core$Elmchemy_XList$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p24 = {ctor: '_Tuple2', _0: n, _1: list};
			_v27_5:
			do {
				_v27_1:
				do {
					if (_p24.ctor === '_Tuple2') {
						if (_p24._1.ctor === '[]') {
							return list;
						} else {
							if (_p24._1._1.ctor === '::') {
								switch (_p24._0) {
									case 1:
										break _v27_1;
									case 2:
										return {
											ctor: '::',
											_0: _p24._1._0,
											_1: {
												ctor: '::',
												_0: _p24._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p24._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p24._1._0,
												_1: {
													ctor: '::',
													_0: _p24._1._1._0,
													_1: {
														ctor: '::',
														_0: _p24._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v27_5;
										}
									default:
										if ((_p24._1._1._1.ctor === '::') && (_p24._1._1._1._1.ctor === '::')) {
											var _p29 = _p24._1._1._1._0;
											var _p28 = _p24._1._1._0;
											var _p27 = _p24._1._0;
											var _p26 = _p24._1._1._1._1._0;
											var _p25 = _p24._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? A2(
												_wende$elmchemy_core$Elmchemy_XList_ops['::'],
												_p27,
												A2(
													_wende$elmchemy_core$Elmchemy_XList_ops['::'],
													_p28,
													A2(
														_wende$elmchemy_core$Elmchemy_XList_ops['::'],
														_p29,
														A2(
															_wende$elmchemy_core$Elmchemy_XList_ops['::'],
															_p26,
															A2(_wende$elmchemy_core$Elmchemy_XList$takeTailRec, n - 4, _p25))))) : A2(
												_wende$elmchemy_core$Elmchemy_XList_ops['::'],
												_p27,
												A2(
													_wende$elmchemy_core$Elmchemy_XList_ops['::'],
													_p28,
													A2(
														_wende$elmchemy_core$Elmchemy_XList_ops['::'],
														_p29,
														A2(
															_wende$elmchemy_core$Elmchemy_XList_ops['::'],
															_p26,
															A3(_wende$elmchemy_core$Elmchemy_XList$takeFast, ctr + 1, n - 4, _p25)))));
										} else {
											break _v27_5;
										}
								}
							} else {
								if (_p24._0 === 1) {
									break _v27_1;
								} else {
									break _v27_5;
								}
							}
						}
					} else {
						break _v27_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p24._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$take = F2(
	function (n, list) {
		return A3(_wende$elmchemy_core$Elmchemy_XList$takeFast, 0, n, list);
	});
var _wende$elmchemy_core$Elmchemy_XList$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v28 = A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], value, result),
					_v29 = n - 1,
					_v30 = value;
				result = _v28;
				n = _v29;
				value = _v30;
				continue repeatHelp;
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$repeat = F2(
	function (n, value) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _wende$elmchemy_core$Elmchemy_XList$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v31 = lo,
					_v32 = hi - 1,
					_v33 = A2(_wende$elmchemy_core$Elmchemy_XList_ops['::'], hi, list);
				lo = _v31;
				hi = _v32;
				list = _v33;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _wende$elmchemy_core$Elmchemy_XList$range = F2(
	function (lo, hi) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _wende$elmchemy_core$Elmchemy_XList$indexedMap = F2(
	function (f, xs) {
		return A3(
			_wende$elmchemy_core$Elmchemy_XList$map2,
			f,
			A2(
				_wende$elmchemy_core$Elmchemy_XList$range,
				0,
				_wende$elmchemy_core$Elmchemy_XList$length(xs) - 1),
			xs);
	});
